<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lin.dao.BookMapper" >
    <select id="searchBookListCount" resultType="java.lang.Integer">
        select COUNT(b.id)
        from
            book b
        left join book_type bt on b.book_type_id = bt.id
        where 1=1
        <if test="bookListDTO.state != null">
            and b.state = #{bookListDTO.state}
        </if>
        <if test="bookListDTO.state == null">
            and (b.state = 1 or b.state = 2)
        </if>
        <if test="bookListDTO.userId != null">
            and b.upload_user_id = #{bookListDTO.userId}
        </if>
        <if test="null != bookListDTO.keyword and '' != bookListDTO.keyword">
            AND (b.book_name LIKE CONCAT('%', #{bookListDTO.keyword}, '%') or b.book_author LIKE CONCAT('%', #{bookListDTO.keyword}, '%')  )
        </if>
        <if test="bookListDTO.bookType != null">
            and bt.book_type_name = #{bookListDTO.bookType}
        </if>
        <if test="bookListDTO.username != null">
            and b.upload_user_id = #{bookListDTO.username}
        </if>
        <if test="bookListDTO.startTime!=null and bookListDTO.endTime != null">
            and (b.upload_time between #{bookListDTO.startTime} and #{bookListDTO.endTime})
        </if>
    </select>

    <select id="searchBookList" resultType="com.lin.vo.BookListVo">
        select
            b.id,
            b.book_name AS bookName,
            b.book_author AS bookAuthor,
            b.amount AS amount,
            b.book_quantity AS bookQuantity,
            bt.book_type_name AS bookTypeName,
            b.book_url AS bookUrl,
            b.upload_user_id as uploadUserId,
            b.state as state,
            b.upload_time as uploadTime,
            b.thumbs_up thumbsUp
        from
        book b
        left join book_type bt on b.book_type_id = bt.id
        WHERE 1 = 1
        <if test="bookListDTO.state != null">
            and b.state = #{bookListDTO.state}
        </if>
        <if test="bookListDTO.state == null">
            and (b.state = 1 or b.state = 2)
        </if>
        <if test="bookListDTO.userId != null">
            and b.upload_user_id = #{bookListDTO.userId}
        </if>
        <if test="bookListDTO.keyword != null and bookListDTO.keyword !='' ">
            AND (b.book_name LIKE CONCAT('%', #{bookListDTO.keyword}, '%') or b.book_author LIKE CONCAT('%', #{bookListDTO.keyword}, '%')  )
        </if>
        <if test="bookListDTO.bookType != null">
            and bt.book_type_name = #{bookListDTO.bookType}
        </if>
        <if test="bookListDTO.username != null">
            and b.upload_user_id = #{bookListDTO.username}
        </if>
        <if test="bookListDTO.startTime!=null and bookListDTO.endTime != null">
            and (b.upload_time between #{bookListDTO.startTime} and #{bookListDTO.endTime})
        </if>
        order by b.upload_time desc
        LIMIT #{page}, #{rows}
    </select>

    <select id="searchBookInfoList" resultType="com.lin.vo.BookInfoVo">
        select
            b.id,
            b.book_name AS bookName,
            b.book_author AS bookAuthor,
            b.amount AS amount,
            b.book_quantity AS bookQuantity,
            bt.book_type_name AS bookTypeName,
            b.upload_time uploadTime,
            b.book_url bookUrl,
            bt.book_type_name bookTypeName,
            bt.book_content bookContent,
            bo.quantity as quantity,
            b.thumbs_up thumbsUp
        from
        book b
        left join book_type bt on b.book_type_id = bt.id
        left join book_order bo on bo.book_id = b.id
        WHERE
        b.id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="bookTypeCount" resultType="com.lin.vo.BookTypeCountVo">
        select
	        bt.book_type_name bookTypeName,
	        Count(b.id) bookTypeNameCount
        from book b
        left join book_type bt on b.book_type_id = bt.id
        group by bt.id
    </select>

    <select id="bookStateCount" resultType="java.lang.Integer">
        select
	        COUNT(b.id)
        from book b
        where b.`state` = #{state}
    </select>

    <select id="bookOneDayCount" resultType="java.lang.Integer">
        select
	        COUNT(b.id)
        from book b
        where b.`state` = 1 and b.upload_time BETWEEN #{begin} and #{end}
    </select>
    <select id="newUserCount" resultType="java.lang.Integer">
        select
            Count(au.id)
        from auth_user au
        where au.create_time BETWEEN #{begin} and #{end}
    </select>
    
    <select id="allUserCount" resultType="java.lang.Integer">
        select count(au.id)
        from auth_user au
    </select>

    <select id="bookInfo" resultType="com.lin.model.BookType">
        select
        bt.id
        from book_type bt
        where  bt.book_type_name = #{bookTypeName}
    </select>

    <select id="searchBookRecommend" resultType="com.lin.vo.BookRecommendVo">
        select
        b.id bookId,
        b.book_name AS bookName,
        b.book_author AS bookAuthor,
        b.amount AS amount,
        b.book_url AS bookUrl,
        b.thumbs_up thumbsUp
        from book b
        order by thumbs_up desc
        limit 6
    </select>

</mapper>